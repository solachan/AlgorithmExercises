package algorithm.leetcode.algorithm.interview;

import algorithm.leetcode.algorithm.TreeNode;

//ËÆæËÆ°‰∏Ä‰∏™ÁÆóÊ≥ïÔºåÊâæÂá∫‰∫åÂèâÊêúÁ¥¢Ê†ë‰∏≠ÊåáÂÆöËäÇÁÇπÁöÑ‚Äú‰∏ã‰∏Ä‰∏™‚ÄùËäÇÁÇπÔºà‰πüÂç≥‰∏≠Â∫èÂêéÁªßÔºâ„ÄÇ
//
// Â¶ÇÊûúÊåáÂÆöËäÇÁÇπÊ≤°ÊúâÂØπÂ∫îÁöÑ‚Äú‰∏ã‰∏Ä‰∏™‚ÄùËäÇÁÇπÔºåÂàôËøîÂõûnull„ÄÇ
//
// Á§∫‰æã 1:
//
// ËæìÂÖ•: root = [2,1,3], p = 1
//
//  2
// / \
//1   3
//
//ËæìÂá∫: 2
//
// Á§∫‰æã 2:
//
// ËæìÂÖ•: root = [5,3,6,2,4,null,null,1], p = 6
//
//      5
//     / \
//    3   6
//   / \
//  2   4
// /
//1
//
//ËæìÂá∫: null
// Related Topics Ê†ë Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ ‰∫åÂèâÊêúÁ¥¢Ê†ë ‰∫åÂèâÊ†ë üëç 89 üëé 0


//leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class NO04_06_InorderSuccessor {
    public static void main(String[] args) {
        TreeNode root = TreeNode.getTree(new Integer[]{5,3,6,2,4,null,null,1});
        TreeNode p = new TreeNode(1);
        System.out.println(inorderSuccessor(root,p));
    }
    //1„ÄÅÈÄíÂΩíÔºå‰∏≠Â∫èÈÅçÂéÜ
    static TreeNode res = null,pre = null;
    public static TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        res = null;
        pre = null;
        helper(root,p);
        return res;
    }

    public static void helper(TreeNode root, TreeNode p) {
        if(root == null){
            return;
        }
        helper(root.left,p);
        if(pre != null && p != null && pre.val == p.val){
            res = root;
            pre = root;
            return;
        }else {
            pre = root;
        }
        helper(root.right,p);
    }

    //2„ÄÅÁõ¥Êé•Ê†πÊçÆ‰∫åÂèâÊêúÁ¥¢Ê†ëÂíå‰∏≠Â∫èÈÅçÂéÜÁöÑÁâπÁÇπ
    //(1)pÊúâÂè≥Â≠êÊ†ëÔºåÂàôÂêéÁªßËäÇÁÇπÊòØÂè≥Â≠êÊ†ëÁöÑÊúÄÂ∑¶ËäÇÁÇπ
    //(2)pÊ≤°ÊúâÂè≥Â≠êÊ†ëÔºåÂàôÂêéÁªßËäÇÁÇπÊòØÊü•ÊâæËøáÁ®ã‰∏≠ÂêëÂ∑¶ÂØªÊâæÊó∂ÁöÑ‰∏ä‰∏Ä‰∏™ËäÇÁÇπ
    public TreeNode inorderSuccessor2(TreeNode root, TreeNode p) {
        TreeNode pre = null;
        while(root.val!=p.val){
            //Âè≥Ëæπ
            if(p.val > root.val){
                root = root.right;
            }
            //Â∑¶Ëæπ
            else{
                pre = root;
                root = root.left;
            }
        }
        //ÂÅáÂ¶ÇÊ≤°ÊúâÂè≥Â≠êÊ†ë
        if(root.right==null){
            return pre;
        }
        else{
            root = root.right;
            while(root.left!=null){
                root = root.left;
            }
            return root;
        }
    }

    //leetcode submit region end(Prohibit modification and deletion)
}
